// <auto-generated />
using System;
using EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EntityFramework.Migrations
{
    [DbContext(typeof(HestiaContext))]
    partial class HestiaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntityFramework.Models.Chore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ColocationId");

                    b.ToTable("Chores");
                });

            modelBuilder.Entity("EntityFramework.Models.ChoreEnrollment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChoreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId", "ChoreId");

                    b.HasIndex("ChoreId");

                    b.ToTable("ChoreEnrollments");
                });

            modelBuilder.Entity("EntityFramework.Models.ChoreMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChoreId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChoreId");

                    b.ToTable("ChoreMessages");
                });

            modelBuilder.Entity("EntityFramework.Models.Colocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Colocations");
                });

            modelBuilder.Entity("EntityFramework.Models.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<Guid>("ColocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ColocationId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("UserId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("EntityFramework.Models.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfPayment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ExpenseCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PaidBy")
                        .HasColumnType("uuid");

                    b.Property<string>("SplitType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("PaidBy");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("EntityFramework.Models.ExpenseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ColocationId");

                    b.ToTable("ExpenseCategories");
                });

            modelBuilder.Entity("EntityFramework.Models.FCMDevice", b =>
                {
                    b.Property<string>("FCMToken")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("FCMToken");

                    b.HasIndex("UserId");

                    b.ToTable("FCMDevices");
                });

            modelBuilder.Entity("EntityFramework.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SentBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ColocationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("EntityFramework.Models.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CoordX")
                        .HasColumnType("integer");

                    b.Property<int>("CoordY")
                        .HasColumnType("integer");

                    b.Property<int>("CoordZ")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsImage")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ColocationId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("EntityFramework.Models.ShoppingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ShoppingListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingListId");

                    b.ToTable("ShoppingItems");
                });

            modelBuilder.Entity("EntityFramework.Models.ShoppingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ColocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ColocationId");

                    b.ToTable("ShoppingList");
                });

            modelBuilder.Entity("EntityFramework.Models.SplitBetween", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.HasKey("UserId", "ExpenseId");

                    b.HasIndex("ExpenseId");

                    b.ToTable("SplitBetweens");
                });

            modelBuilder.Entity("EntityFramework.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastConnection")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PathToProfilePicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ColocationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityFramework.Models.Chore", b =>
                {
                    b.HasOne("EntityFramework.Models.Colocation", "Colocation")
                        .WithMany("Chores")
                        .HasForeignKey("ColocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colocation");
                });

            modelBuilder.Entity("EntityFramework.Models.ChoreEnrollment", b =>
                {
                    b.HasOne("EntityFramework.Models.Chore", "Chore")
                        .WithMany("ChoreEnrollments")
                        .HasForeignKey("ChoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFramework.Models.User", "User")
                        .WithMany("ChoreEnrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chore");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityFramework.Models.ChoreMessage", b =>
                {
                    b.HasOne("EntityFramework.Models.Chore", "Chore")
                        .WithMany("ChoreMessages")
                        .HasForeignKey("ChoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chore");
                });

            modelBuilder.Entity("EntityFramework.Models.Entry", b =>
                {
                    b.HasOne("EntityFramework.Models.Colocation", "Colocation")
                        .WithMany()
                        .HasForeignKey("ColocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFramework.Models.Expense", "Expense")
                        .WithMany("Entries")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFramework.Models.User", "User")
                        .WithMany("Entries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colocation");

                    b.Navigation("Expense");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityFramework.Models.Expense", b =>
                {
                    b.HasOne("EntityFramework.Models.ExpenseCategory", "ExpenseCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFramework.Models.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("PaidBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenseCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityFramework.Models.ExpenseCategory", b =>
                {
                    b.HasOne("EntityFramework.Models.Colocation", "Colocation")
                        .WithMany("ExpenseCategories")
                        .HasForeignKey("ColocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colocation");
                });

            modelBuilder.Entity("EntityFramework.Models.FCMDevice", b =>
                {
                    b.HasOne("EntityFramework.Models.User", "User")
                        .WithMany("FCMDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityFramework.Models.Message", b =>
                {
                    b.HasOne("EntityFramework.Models.Colocation", "Colocation")
                        .WithMany("Messages")
                        .HasForeignKey("ColocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colocation");
                });

            modelBuilder.Entity("EntityFramework.Models.Reminder", b =>
                {
                    b.HasOne("EntityFramework.Models.Colocation", "Colocation")
                        .WithMany("Reminders")
                        .HasForeignKey("ColocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colocation");
                });

            modelBuilder.Entity("EntityFramework.Models.ShoppingItem", b =>
                {
                    b.HasOne("EntityFramework.Models.ShoppingList", "ShoppingList")
                        .WithMany("ShoppingItems")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("EntityFramework.Models.ShoppingList", b =>
                {
                    b.HasOne("EntityFramework.Models.Colocation", "Colocation")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("ColocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colocation");
                });

            modelBuilder.Entity("EntityFramework.Models.SplitBetween", b =>
                {
                    b.HasOne("EntityFramework.Models.Expense", "Expense")
                        .WithMany("SplitBetweens")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFramework.Models.User", "User")
                        .WithMany("SplitBetweens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Expense");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityFramework.Models.User", b =>
                {
                    b.HasOne("EntityFramework.Models.Colocation", "Colocation")
                        .WithMany("Users")
                        .HasForeignKey("ColocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Colocation");
                });

            modelBuilder.Entity("EntityFramework.Models.Chore", b =>
                {
                    b.Navigation("ChoreEnrollments");

                    b.Navigation("ChoreMessages");
                });

            modelBuilder.Entity("EntityFramework.Models.Colocation", b =>
                {
                    b.Navigation("Chores");

                    b.Navigation("ExpenseCategories");

                    b.Navigation("Messages");

                    b.Navigation("Reminders");

                    b.Navigation("ShoppingLists");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EntityFramework.Models.Expense", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("SplitBetweens");
                });

            modelBuilder.Entity("EntityFramework.Models.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("EntityFramework.Models.ShoppingList", b =>
                {
                    b.Navigation("ShoppingItems");
                });

            modelBuilder.Entity("EntityFramework.Models.User", b =>
                {
                    b.Navigation("ChoreEnrollments");

                    b.Navigation("Entries");

                    b.Navigation("Expenses");

                    b.Navigation("FCMDevices");

                    b.Navigation("SplitBetweens");
                });
#pragma warning restore 612, 618
        }
    }
}
